import React from "react";

export const Description = () => {
  return (
    <>
      <h2>Паттерн #1. Составные компоненты</h2>
      <p>
        <strong>
          Этот шаблон разработки позволяет создавать понятные декларативные
          компоненты без многоуровневого пробрасывания пропсов. Его основное
          достоинство – разделение ответственности между несколькими элементами.
          Составные компоненты проще настраивать, и API у них максимально
          простой.
        </strong>
      </p>
      <h3 className="plus">Уменьшается сложность API</h3>
      <p className="plus">
        Больше нет необходимости передавать все параметры в один гигантский
        родительский компонент и затем пробрасывать их до дочерних элементов
        интерфейса. Теперь каждое свойство сразу прикрепляется к своему
        подкомпоненту – это выглядит проще и логичнее.
      </p>
      <h3 className="plus">Гибкая структура разметки</h3>
      <p className="plus">
        Так как все элементы пользовательского интерфейса вынесены в отдельные
        подкомпоненты, разработчик может их перегруппировать или даже убрать по
        своему усмотрению. Таким образом реализуется модифицируемость вашего
        компонента.
      </p>
      <h3 className="plus">Разделение ответственности</h3>
      <p className="plus">
        Основная логика содержится в базовом компоненте счетчика, а затем
        используется React.Context для совместного использования состояния и
        обработки событий в дочерних элементах. В итоге мы получаем четкое
        разделение ответственности внутри компонента.
      </p>
      <h3 className="minus">
        Слишком большая гибкость пользовательского интерфейса
      </h3>
      <p className="minus">
        Гибкость – это не всегда хорошо. Без должного контроля, она может
        привести к изменению интерфейса или даже поломке компонента. Например,
        ничто не мешает пользователю добавить дополнительный элемент или,
        наоборот, забыть что-то важное (подкомпонент или параметр).
      </p>
      <h3 className="minus">Громоздкая разметка</h3>
      <p className="minus">
        Очевидно, что количество строк разметки существенно увеличивается, ведь
        каждый элемент представлен отдельным компонентом, а не спрятан внутри
        родителя.{" "}
      </p>
    </>
  );
};
